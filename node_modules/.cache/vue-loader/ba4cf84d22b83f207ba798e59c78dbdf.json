{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bilou/vs_workspace/vue-rutube/VueRutube.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/bilou/vs_workspace/vue-rutube/VueRutube.vue","mtime":1569843531216},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nexport default {\n  props: {\n    videoId: {\n      type: String,\n      default: '7163336'\n    },\n    width: {\n      type: String,\n      default: '720'\n    },\n    height: {\n      type: String,\n      default: '480'\n    },\n    frameborder: {\n      type: String,\n      default: '0'\n    }\n  },\n  data: () => {\n    return {\n      player: null,\n      ready: false,\n      currentTime: 0\n    }\n  },\n  computed: {\n    sourceUrl() {\n      return `//rutube.ru/play/embed/${this.videoId}?quality=1`\n    }\n  },\n  mounted() {\n    this.player = document.getElementById('rutube-player')\n    this.handleEvent()\n  },\n  methods: {\n    sendPostMessage(type, data) {\n      if (!this.ready) return\n\n      this.player.contentWindow.postMessage(JSON.stringify({\n        type: `player:${type}`,\n        data: data\n      }), '*');\n    },\n    play() {\n      this.sendPostMessage('play', {})\n    },\n    pause() {\n      this.sendPostMessage('pause', {})\n    },\n    stop() {\n      this.sendPostMessage('stop', {})\n    },\n    mute() {\n      this.sendPostMessage('mute', {})\n    },\n    unMute() {\n      this.sendPostMessage('unMute', {})\n    },\n    setCurrentTime(seconds) {\n      this.sendPostMessage('setCurrentTime', {time: seconds})\n    },\n    getCurrentTime() {\n      return this.currentTime\n    },\n    relativelySeek(seconds) {\n      this.sendPostMessage('relativelySeek', {time: seconds})\n    },\n    changeVideo(id, quality=1) {\n      this.sendPostMessage('changeVideo', {params: {hash: id, quality: quality}})\n    },\n    setVolume(volume) {\n      this.sendPostMessage('setVolume', {volume: volume})\n    },\n    setSkinColor(color) {\n      this.sendPostMessage('setSkinColor', {params: {color: color}})\n    },\n    remove() {\n      this.sendPostMessage('remove', {})\n    },\n    handleEvent() {\n      window.addEventListener('message', (event) => {\n        let message = JSON.parse(event.data)\n        this.emitEvent(message)\n      })\n    },\n    emitEvent(message) {\n      switch (message.type) {\n        case 'player:ready':\n          this.ready = true\n          this.$emit('ready')\n          break\n        case 'player:changeState':\n          this.$emit(message.data.state)\n          break\n        case 'player:currentTime':\n          this.currentTime = message.data.time\n          this.$emit('currentTime', message.data.time)\n      }\n    }\n  }\n}\n",{"version":3,"sources":["VueRutube.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VueRutube.vue","sourceRoot":".","sourcesContent":["<template>\n  <iframe id=\"rutube-player\" :width=\"width\" :height=\"height\" :src=\"sourceUrl\" :frameborder=\"frameborder\" webkitAllowFullScreen mozallowfullscreen allowFullScreen />\n</template>\n\n<script>\nexport default {\n  props: {\n    videoId: {\n      type: String,\n      default: '7163336'\n    },\n    width: {\n      type: String,\n      default: '720'\n    },\n    height: {\n      type: String,\n      default: '480'\n    },\n    frameborder: {\n      type: String,\n      default: '0'\n    }\n  },\n  data: () => {\n    return {\n      player: null,\n      ready: false,\n      currentTime: 0\n    }\n  },\n  computed: {\n    sourceUrl() {\n      return `//rutube.ru/play/embed/${this.videoId}?quality=1`\n    }\n  },\n  mounted() {\n    this.player = document.getElementById('rutube-player')\n    this.handleEvent()\n  },\n  methods: {\n    sendPostMessage(type, data) {\n      if (!this.ready) return\n\n      this.player.contentWindow.postMessage(JSON.stringify({\n        type: `player:${type}`,\n        data: data\n      }), '*');\n    },\n    play() {\n      this.sendPostMessage('play', {})\n    },\n    pause() {\n      this.sendPostMessage('pause', {})\n    },\n    stop() {\n      this.sendPostMessage('stop', {})\n    },\n    mute() {\n      this.sendPostMessage('mute', {})\n    },\n    unMute() {\n      this.sendPostMessage('unMute', {})\n    },\n    setCurrentTime(seconds) {\n      this.sendPostMessage('setCurrentTime', {time: seconds})\n    },\n    getCurrentTime() {\n      return this.currentTime\n    },\n    relativelySeek(seconds) {\n      this.sendPostMessage('relativelySeek', {time: seconds})\n    },\n    changeVideo(id, quality=1) {\n      this.sendPostMessage('changeVideo', {params: {hash: id, quality: quality}})\n    },\n    setVolume(volume) {\n      this.sendPostMessage('setVolume', {volume: volume})\n    },\n    setSkinColor(color) {\n      this.sendPostMessage('setSkinColor', {params: {color: color}})\n    },\n    remove() {\n      this.sendPostMessage('remove', {})\n    },\n    handleEvent() {\n      window.addEventListener('message', (event) => {\n        let message = JSON.parse(event.data)\n        this.emitEvent(message)\n      })\n    },\n    emitEvent(message) {\n      switch (message.type) {\n        case 'player:ready':\n          this.ready = true\n          this.$emit('ready')\n          break\n        case 'player:changeState':\n          this.$emit(message.data.state)\n          break\n        case 'player:currentTime':\n          this.currentTime = message.data.time\n          this.$emit('currentTime', message.data.time)\n      }\n    }\n  }\n}\n</script>"]}]}